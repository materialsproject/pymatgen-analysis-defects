name: testing
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[strict]
          pip install -e .[dev]
          pre-commit install

      - name: Lint
        run: |
          pre-commit run --all-files --show-diff-on-failure

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    env:
      PMG_MAPI_KEY: ${{ secrets.PMG_MAPI_KEY }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[strict]
          pip install -e .[tests]

      - name: Test
        run: pytest --cov=pymatgen --cov-report=xml

      - uses: codecov/codecov-action@v1
        if: matrix.python-version == 3.10
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  # figure out if it is possible to upload to testpypi
  # deploy-test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.x'
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install build
  #   - name: Build package
  #     run: python -m build
  #   - name: Publish package to TestPyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #       repository-url: https://test.pypi.org/legacy/

  docs:
    runs-on: ubuntu-latest

    env:
      PMG_MAPI_KEY: ${{ secrets.PMG_MAPI_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Install pandoc
        run: sudo apt-get install pandoc

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          pip install -e .[strict]
          pip install -e .[docs]
      - name: Build
        run: jupyter-book build --path-output docs docs/source
        # Develop branch only
      - name: Deploy
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./docs/_build/html
