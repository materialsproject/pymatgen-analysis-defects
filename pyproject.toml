[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]

[project]
authors = [{ name = "Jimmy-Xuan Shen", email = "jmmshn@gmail.com" }]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Operating System :: OS Independent",
  "Topic :: Other/Nonlisted Topic",
  "Topic :: Scientific/Engineering",
]
dependencies = [
  "pymatgen",
  "scikit-image>=0.19.3",
  "numpy"
]
description = "Pymatgen extension for defects analysis"
dynamic = ["version"]
keywords = ["high-throughput", "automated", "dft", "defects"]
license = { text = "modified BSD" }
name = "pymatgen-analysis-defects"
readme = "README.rst"
requires-python = '>=3.9'

[project.optional-dependencies]
finder = ["dscribe>=2.0.0"]
dev = ["pre-commit>=2.12.1"]
docs = [
  "jupyter-book>=0.13.1",
]
pydefect = ["pydefect>=0.6.2"]

strict = [
  "pymatgen==2023.10.11",
  "dscribe==2.1.0",
  "scikit-image==0.21.0",
]

tests = ["pytest==7.4.2", "pytest-cov==4.1.0", "nbmake==1.4.6"]


[tool.setuptools.dynamic]
readme = { file = ["README.rst"] }

[project.urls]
documentation = "https://materialsproject.github.io/pymatgen-analysis-defects/"
homepage = "https://materialsproject.github.io/pymatgen-analysis-defects/"
repository = "https://github.com/materialsproject/pymatgen-analysis-defects"

[tool.setuptools.packages.find]
exclude = ["tests"]
where = ["./"]

[tool.versioningit.vcs]
default-tag = "0.0.1"
method = "git"

[tool.mypy]
ignore_missing_imports = true
no_strict_optional = true

[tool.coverage.run]
branch = true
include = ["pymatgen/*"]
parallel = true

[tool.coverage.paths]
source = ["pymatgen/"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.autoflake]
in-place = true
remove-unused-variables = true
remove-all-unused-imports = true
expand-star-imports = true
ignore-init-module-imports = true

[tool.ruff]
src = ["pymatgen", "tests"]

line-length = 88
indent-width = 4


# By default, ruff only uses all "E" (pycodestyle) and "F" (pyflakes) rules.
# Here we append to the defaults.
select = [
  # (flake8-builtins) detect shadowing of python builtin symbols by variables and arguments.
  # Attributes are OK (which is why A003) is not included here.
  "A001",
  "A002",
  # (useless expression): Expressions that aren't assigned to anything are typically bugs.
  "B018",
  # (pydocstyle) Docstring-related rules. A large subset of these are ignored by the
  # "convention=google" setting, we set under tool.ruff.pydocstyle.
  "D",
  # (pycodestyle) pycodestyle rules
  "E",
  # (pyflakes) pyflakes rules
  "F",
  # (isort) detect improperly sorted imports
  "I001",
  # (pylint) use all pylint rules from categories "Convention", "Error", and "Warning" (ruff
  # currently implements only a subset of pylint's rules)
  "PLE",
  "PLW",
  # (no commented out code) keep commented out code blocks out of the codebase
  # "ERA001",
  # (ruff-specific) Enable all ruff-specific checks (i.e. not ports of
  # functionality from an existing linter).
  "RUF",
  # (private member access) Flag access to `_`-prefixed symbols. By default the various special
  # methods on `NamedTuple` are ignored (e.g. `_replace`).
  "SLF001",
  # (flake8-type-checking) Auto-sort imports into TYPE_CHECKING blocks depending on whether
  # they are runtime or type-only imports.
  "TCH",
  # (banned-api) Flag use of banned APIs. See tool.ruff.flake8-tidy-imports.banned-api for details.
  "TID251",
  # (disallow print statements) keep debugging statements out of the codebase
  "T20",
  # (f-strings) use f-strings instead of .format()
  "UP032",
  # (invalid escape sequence) flag errant backslashes
  "W605",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`).
select = ["E4", "E7", "E9", "F", "D", "I001", "TCH"]
ignore = ["E203", "E501", "F401"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL", "TCH"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"
